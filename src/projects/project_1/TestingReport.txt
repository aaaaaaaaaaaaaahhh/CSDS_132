- Date Class

create an instance with Date d = new Date(31, 12, 2000) in the interactions terminal,
then call d.getDay(), d.getMonth(), and d.getYear(), which should return 31, 12, and 2000 respectively

To test the incrementeDate() and toString() method (as well as some other functionality), call
d.incrementeDate(), then d.toString() which should return "January 1, 2001". To test this effectively,
you should repeat this test with the Date objects Date d1 = new Date(11, 11, 1700), 
Date d2 = new Date(28, 2, 2500), and Date d3 = new Date(31, 12, 2200), each calling incrementeDate() twice

to test daysPerMonth(), just call Date.daysPerMonth() using each number from 1 to 12. The outputs should
be the number of days in the month corresponding to its number. Also input a number outside of the range
and the output should be 0


retart your interactions window then,
to test equals() and sameEffectiveDayAs(), create 3 Date instances: Date d3 = new Date(28, 12, 2010),
Date d4 = new Date(28, 2, 2000), and Date d5 = new Date(28, 12, 2000) call d4.sameEffectiveDayAs(d3)
which should return true and d4.equals(d3) which should return false. then call d3.equals(d5) which
should return true. finally, increment the date of d3 and call d4.sameEffectiveDayAs(d3) again. the
result should be true


- Utility Class

create an instance of the Utility class with Utility u = new Utility(5.0, new Date(22, 6, 2007))
then, call each getter method on the new instance. the results should look like:

u.getUtilityRate() --> 5.0
u.getMonthUsage() --> 0
u.getYearUsage() --> 0
u.getMonthBill() --> 0.0
u.getBalance() --> 0.0
u.getAmountPaidThisMonth() --> 0.0
u.getAmountDelinquent() --> 0.0
u.getAniversaryDate() --> June 22, 2007
u.getSalesTaxRate() --> 1.0
u.getInterestRate() --> 1.0
u.getMonthlyCharge() --> 0.0

then call:
u.setUtilityRate(2.0)
u.setMonthUsage(87)
u.updateYearUsage(50)
u.updateYearUsage(25)
u.setMonthBill(4.0)
u.updateBalance(3)
u.updateBalance(-2)
u.updateAmountPaidThisMonth(1)
u.updateAmountPaidThisMonth(3)
u.setAmountDelinquent(50)
u.setAniversaryDate(new Date(5, 5, 1802))
u.setSalesTaxRate(100.0)
u.setInterestRate(.001)


then call all the getters again and the outputs should be

u.getUtilityRate() --> 2.0
u.getMonthUsage() --> 87
u.getYearUsage() --> 75
u.getMonthBill() --> 4.0
u.getBalance() --> 1.0
u.getAmountPaidThisMonth() --> 4.0
u.getAmountDelinquent() --> 50.0
u.getAniversaryDate() --> May 5, 1802
u.getSalesTaxRate() --> 100.0
u.getInterestRate() --> .001
u.getMonthlyCharge() --> 174.0

then call u.makePayment(0.5) and
u.getBalance() --> 0.5
u.getAmountPaidThisMonth() --> 4.5

to test endOfMonthProcessing() call it on u and the result of each of the
getters should be:

u.getUtilityRate() --> 2.0
u.getMonthUsage() --> 87
u.getYearUsage() --> 75
u.getMonthBill() --> 17574.5495495
u.getBalance() --> 17574.5495495
u.getAmountPaidThisMonth() --> 0.0
u.getAmountDelinquent() --> 49.5495
u.getAniversaryDate() --> May 5, 1802
u.getSalesTaxRate() --> 100.0
u.getInterestRate() --> .001
u.getMonthlyCharge() --> 174.0


- WaterUtility Class


call WaterUtility uw = new WaterUtility(2.0, new Date(1, 1, 2001), 2, 4.5) then call the getters

uw.getNumBaths() --> 2
uw.getBathFee() --> 4.5

then the setters

uw.setNumBaths(5)
uw.setBathFee(10)

uw.getNumBaths() --> 5
uw.getBathFee() --> 10.0


then calling uw.setMonthUsage(5)

uw.getMonthlyCharge() --> 60.0

- GasUtility Class

GasUtility gu = new GasUtility(2.0, new Date(1, 1, 2001))

gu.isInstallmentPlan() --> false

gu.setInstallmentPlan(true)

gu.isInstallmentPlan() --> true

gu.updateYearUsage(144)

gu.endOfYearProcessing()

gu.getMonthlyCharge(true) --> 12.0

gu.getMonthlyCharge(false) --> 0.0

gu.endOfMonthProcessing()

gu.getMonthBill() --> 12.0


- Customer Class
Customer c1 = new Customer(new Date(1, 1, 2001))

Utility u = new Utility(1.0, new Date(1, 1, 2001))

WaterUtility wu = new WaterUtility(1.0, new Date(1, 1, 2001), 1, 1.0)

GasUtility gu = new GasUtility(1.0, new Date(1, 1, 2001))

Customer c2 = new Customer(new Date(1, 1, 2001), u, wu, gu)

c2.getElectricUtility() --> a Utility object

c2.getWaterUtility() --> a WaterUtility object

c2.getGasUtility() --> a GasUtility object


c1.getElectricUtility() --> null

c1.getWaterUtility() --> null

c1.getGasUtility() --> null


c1.setElectricUtility(u)

c1.setWaterUtility(wu)

c1.setGasUtility(gu)


c1.getElectricUtility() --> same Utility object as c2

c1.getWaterUtility() --> same WaterUtility object as c2

c1.getGasUtility() --> same GasUtility object as c2


c2.getDate() --> January 1, 2001

c2.setDate(new Date(10, 1, 2001))

c2.getDate() --> January 10, 2001

Customer c3 = new Customer(new Date(31, 12, 2000), u, wu, gu)

c3.getElectricUtility().getAmountPaidThisMonth() --> 0.0

c3.getElectricUtility().updateAmountPaidThisMonth(5)

c3.getElectricUtility().updateYearUsage(3)

c3.getElectricUtility().getYearUsage() --> 3

c3.incrementDate()

c3.getElectricUtility().getMonthBill() --> 0.0

c3.getElectricUtility().getAmountPaidThisMonth() --> 3.0
